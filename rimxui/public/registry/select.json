{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:component",
  "author": "The RimxUi Team",
  "dependencies": [
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/components/Select/Select.tsx",
      "content": "import * as React from \"react\";\nimport { mc } from \"@/utils\";\nimport { Check, ChevronDown } from \"lucide-react\";\n\n// Context to share state between Select components\nconst SelectContext = React.createContext<{\n  value: string;\n  onValueChange: (value: string) => void;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  name?: string;\n  className?:string;\n} | null>(null);\n\n// Hook to consume the Select context\nconst useSelectContext = () => {\n  const context = React.useContext(SelectContext);\n  if (!context) {\n    throw new Error(\"Select components must be used within a Select component\");\n  }\n  return context;\n};\n\ninterface SelectProps {\n  children: React.ReactNode;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  name?: string;\n}\n\nconst Select = React.forwardRef<HTMLDivElement, SelectProps>(\n  ({ children, value, defaultValue, onValueChange, name }, ref) => {\n    \n    const [open, setOpen] = React.useState(false);\n\n    const [internalValue, setInternalValue] = React.useState(\n      value || defaultValue || \"\",\n    );\n\n    // Update internal value when controlled value changes\n    React.useEffect(() => {\n      if (value !== undefined) {\n        setInternalValue(value);\n      }\n    }, [value]);\n\n    const handleValueChange = React.useCallback(\n      (newValue: string) => {\n        if (value === undefined) {\n          setInternalValue(newValue);\n        }\n        onValueChange?.(newValue);\n        setOpen(false);\n      },\n      [value, onValueChange],\n    );\n\n    return (\n      <SelectContext.Provider\n        value={{\n          value: internalValue,\n          onValueChange: handleValueChange,\n          open,\n          setOpen,\n          name,\n          \n        }}\n      >\n        <div ref={ref} className=\"relative\">\n          {children}\n        </div>\n      </SelectContext.Provider>\n    );\n  },\n);\n\nSelect.displayName = \"Select\";\n\ninterface SelectTriggerProps extends React.HTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst SelectTrigger = React.forwardRef<HTMLButtonElement, SelectTriggerProps>(\n  ({ children, className, ...props }, ref) => {\n    const { open, setOpen } = useSelectContext();\n    \n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        role=\"combobox\"\n        aria-expanded={open}\n        className={mc(\n          \"flex h-10 items-center justify-between rounded-md border border-gray-200 px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus:ring-gray-300\",\n          className,\n        )}\n        onClick={() => setOpen(!open)}\n        {...props}\n      >\n        {children}\n        <ChevronDown className=\"h-4 w-4 opacity-50\" />\n      </button>\n    );\n  },\n);\n\nSelectTrigger.displayName = \"SelectTrigger\";\n\ninterface SelectValueProps {\n  placeholder?: string;\n  className?: string;\n}\n\nconst SelectValue = React.forwardRef<HTMLSpanElement, SelectValueProps>(\n  ({ placeholder, className }, ref) => {\n    const { value } = useSelectContext();\n\n    return (\n      <span ref={ref} className={mc(\"block truncate\", className)}>\n        {value ? value : placeholder}\n      </span>\n    );\n  },\n);\n\nSelectValue.displayName = \"SelectValue\";\n\ninterface SelectContentProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst SelectContent = React.forwardRef<HTMLDivElement, SelectContentProps>(\n  ({ children, className }, ref) => {\n    const { open } = useSelectContext();\n\n    if (!open) return null;\n\n    return (\n      <div\n        ref={ref}\n        className={mc(\n          \"absolute z-50 w-[180px] overflow-hidden rounded-md border border-gray-200 text-gray-950 shadow-md animate-in fade-in-80 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50\",\n          \"mt-1\",\n          className,\n        )}\n      >\n        <div>{children}</div>\n      </div>\n    );\n  },\n);\n\nSelectContent.displayName = \"SelectContent\";\n\ninterface SelectItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst SelectItem = React.forwardRef<HTMLDivElement, SelectItemProps>(\n  ({ value: itemValue, children, className, ...props }, ref) => {\n    const { value, onValueChange } = useSelectContext();\n    const selected = value === itemValue;\n\n    return (\n      <div\n        ref={ref}\n        role=\"option\"\n        aria-selected={selected}\n        data-value={itemValue}\n        data-selected={selected}\n        className={mc(\n          \"relative cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 hover:bg-gray-100 focus:bg-gray-100 dark:hover:bg-gray-800 dark:focus:bg-gray-800\",\n          className,\n        )}\n        onClick={() => onValueChange(itemValue)}\n        {...props}\n      >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n          {selected && <Check className=\"h-4 w-4\" />}\n        </span>\n        <span className=\"text-sm\">{children}</span>\n      </div>\n    );\n  },\n);\n\nSelectItem.displayName = \"SelectItem\";\n\nexport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem };\n",
      "type": "registry:component",
      "target": "src/components/ui/Select.tsx"
    }
  ]
}