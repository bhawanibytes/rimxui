{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toggle",
  "type": "registry:component",
  "author": "The RimxUi Team",
  "dependencies": [
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/components/Toggle/Toggle.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { mc } from \"@/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-white transition-colors hover:bg-gray-100 hover:text-gray-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-gray-100 data-[state=on]:text-gray-900 dark:ring-offset-gray-950 dark:hover:bg-gray-800 dark:hover:text-gray-50 dark:focus-visible:ring-gray-300 dark:data-[state=on]:bg-gray-800 dark:data-[state=on]:text-gray-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-gray-200 bg-transparent hover:bg-gray-100 hover:text-gray-900 dark:border-gray-800 dark:hover:bg-gray-800 dark:hover:text-gray-50\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ToggleProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof toggleVariants> {\n  pressed?: boolean;\n  onPressedChange?: (pressed: boolean) => void;\n}\n\nconst Toggle = React.forwardRef<HTMLButtonElement, ToggleProps>(\n  (\n    { className, variant, size, pressed, onPressedChange, children, ...props },\n    ref,\n  ) => {\n    const [isPressed, setIsPressed] = React.useState(pressed || false);\n\n    React.useEffect(() => {\n      if (pressed !== undefined) {\n        setIsPressed(pressed);\n      }\n    }, [pressed]);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      const newPressed = !isPressed;\n      setIsPressed(newPressed);\n      onPressedChange?.(newPressed);\n      props.onClick?.(event);\n    };\n\n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        aria-pressed={isPressed}\n        data-state={isPressed ? \"on\" : \"off\"}\n        className={mc(toggleVariants({ variant, size }), className)}\n        onClick={handleClick}\n        {...props}\n      >\n        {children}\n      </button>\n    );\n  },\n);\n\nToggle.displayName = \"Toggle\";\n\nexport { Toggle };\n",
      "type": "registry:component",
      "target": "src/components/ui/Toggle.tsx"
    }
  ]
}